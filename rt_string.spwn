extract obj_props

let x = 30;
let y = 30 * 3;
let ccount = 0;
let y_count = 0;
let break_y = 0;
let startSpot = [15, 50];
let amount = 100;
let count = 0;
let limit = 3;
let start = 0;
let counters = {};
let timesUsed = {};

// ahhaha sert code sotlen,
ascii_table = ['AA==', 'AQ==', 'Ag==', 'Aw==', 'BA==', 'BQ==', 'Bg==', 'Bw==', 'CA==', 'CQ==', 'Cg==', 'Cw==', 'DA==', 'DQ==', 'Dg==', 'Dw==', 'EA==', 'EQ==', 'Eg==', 'Ew==', 'FA==', 'FQ==', 'Fg==', 'Fw==', 'GA==', 'GQ==', 'Gg==', 'Gw==', 'HA==', 'HQ==', 'Hg==', 'Hw==', 'IA==', 'IQ==', 'Ig==', 'Iw==', 'JA==', 'JQ==', 'Jg==', 'Jw==', 'KA==', 'KQ==', 'Kg==', 'Kw==', 'LA==', 'LQ==', 'Lg==', 'Lw==', 'MA==', 'MQ==', 'Mg==', 'Mw==', 'NA==', 'NQ==', 'Ng==', 'Nw==', 'OA==', 'OQ==', 'Og==', 'Ow==', 'PA==', 'PQ==', 'Pg==', 'Pw==', 'QA==', 'QQ==', 'Qg==', 'Qw==', 'RA==', 'RQ==', 'Rg==', 'Rw==', 'SA==', 'SQ==', 'Sg==', 'Sw==', 'TA==', 'TQ==', 'Tg==', 'Tw==', 'UA==', 'UQ==', 'Ug==', 'Uw==', 'VA==', 'VQ==', 'Vg==', 'Vw==', 'WA==', 'WQ==', 'Wg==', 'Ww==', 'XA==', 'XQ==', 'Xg==', 'Xw==', 'YA==', 'YQ==', 'Yg==', 'Yw==', 'ZA==', 'ZQ==', 'Zg==', 'Zw==', 'aA==', 'aQ==', 'ag==', 'aw==', 'bA==', 'bQ==', 'bg==', 'bw==', 'cA==', 'cQ==', 'cg==', 'cw==', 'dA==', 'dQ==', 'dg==', 'dw==', 'eA==', 'eQ==', 'eg==', 'ew==', 'fA==', 'fQ==', 'fg==', 'fw==', 'woA=', 'woE=', 'woI=', 'woM=', 'woQ=', 'woU=', 'woY=', 'woc=', 'wog=', 'wok=', 'woo=', 'wos=', 'wow=', 'wo0=', 'wo4=', 'wo8=', 'wpA=', 'wpE=', 'wpI=', 'wpM=', 'wpQ=', 'wpU=', 'wpY=', 'wpc=', 'wpg=', 'wpk=', 'wpo=', 'wps=', 'wpw=', 'wp0=', 'wp4=', 'wp8=', 'wqA=', 'wqE=', 'wqI=', 'wqM=', 'wqQ=', 'wqU=', 'wqY=', 'wqc=', 'wqg=', 'wqk=', 'wqo=', 'wqs=', 'wqw=', 'wq0=', 'wq4=', 'wq8=', 'wrA=', 'wrE=', 'wrI=', 'wrM=', 'wrQ=', 'wrU=', 'wrY=', 'wrc=', 'wrg=', 'wrk=', 'wro=', 'wrs=', 'wrw=', 'wr0=', 'wr4=', 'wr8=', 'w4A=', 'w4E=', 'w4I=', 'w4M=', 'w4Q=', 'w4U=', 'w4Y=', 'w4c=', 'w4g=', 'w4k=', 'w4o=', 'w4s=', 'w4w=', 'w40=', 'w44=', 'w48=', 'w5A=', 'w5E=', 'w5I=', 'w5M=', 'w5Q=', 'w5U=', 'w5Y=', 'w5c=', 'w5g=', 'w5k=', 'w5o=', 'w5s=', 'w5w=', 'w50=', 'w54=', 'w58=', 'w6A=', 'w6E=', 'w6I=', 'w6M=', 'w6Q=', 'w6U=', 'w6Y=', 'w6c=', 'w6g=', 'w6k=', 'w6o=', 'w6s=', 'w6w=', 'w60=', 'w64=', 'w68=', 'w7A=', 'w7E=', 'w7I=', 'w7M=', 'w7Q=', 'w7U=', 'w7Y=', 'w7c=', 'w7g=', 'w7k=', 'w7o=', 'w7s=', 'w7w=', 'w70=', 'w74=', 'w78=']

charCodeAt = (char: @string) {
  if char.length == 1 {
    b64 = $.b64encode(char)
    return ascii_table.index(b64)
  } else {
    throw "Parameter 'char' must be a single character."
  }
}

fromCharCode = (int: @number) {
  if int < 256 {
    return $.b64decode(ascii_table[int])
  } else {
    throw "Ascii code cannot be bigger than 255."
  }
}

let repeat = (fn, times) {
    (' ' * (times - 1)).split(' ').map(x => fn())
}

repeat(() {
    let text = obj {
        OBJ_ID: 914,
        TEXT: $.b64encode(fromCharCode(ccount + 97)),
        X: x,
        Y: y - break_y
    };
    if (y_count > 10) { break_y+= 10 * 3; y_count = 0; x = 0; }
    $.add(text);
    x += 10 * 3;
    ccount++; y_count++;
}, 26)


repeat(() {
    let letter = fromCharCode((start - count) / (limit - 1))
    let range = @array(start..start + limit).map(x => @group(x))
    for i in range {
        let text = obj {
        OBJ_ID: 914,
        TEXT: $.b64encode(letter),
        X: (amount * -1) * 3,
        Y: amount * 3,
        GROUPS: i
        };
    $.add(text)
        counters[i as @string] = text;
    }
    start += limit;
    count++;
}, 256);

let create_string = (str) {
    let arr = str.split('')
    let resarr = [];
    for i in arr {
      let g = charCodeAt(i) * limit;
      if !(i in timesUsed) {
          let timesUsed[i] = 1;
      } else {
          timesUsed[i]++;
          g += timesUsed[i];
      }
      resarr.push(@group(g));
    }
    return resarr;
}

let write_string = (str, let sp1, sp2, spread_amount = 2) {
    for g in str {
        g.move(amount + sp1, (amount * -1) + sp2)  
        sp1 += (spread_amount * 3);
    }
}

return { create_string, write_string }
